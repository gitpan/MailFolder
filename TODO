+ mbox interface (mbox really is a bletcherous little file format)
	+ add ability to specify locking strategy.
	+ Modularize loading WorkingFile between open, sync, and append
	+ Look at doing mbox without copying the entire folder to a
	  working file.

+ emaul interface
	+ add folder locking
	+ have update, refile, and pack(?) queue operations for later syncing
	+ option for whether it makes backup copies of modified messages

+ Hook into MIME::Entity.
  The fact that Mail::Internet and MIME::Entity have different
  interfaces still needs to be dealt with.  I'm contemplating just
  flinging temp filenames in a TempMessage class (to handle automatic
  deletion) instead of (or in addition to) Mail::Internet references.
  Since it looks like, internally, Mail::Folder can get away with just
  knowing about the message header and the message size, this might be
  a workable solution.

+ Add flag to {first,last,next,prev}_message to optionally skip
  messages that have any of a given list of labels.

+ Add Size member to Messages structure and have folder interfaces
  fill in the information.

+ Add ability to sort actual folder.

+ Add threaded sort

+ Option to not use or store the saved current message & named
  sequences of interfaces that provide persistant storage of the items.

+ Provide methods to alleviate direct access of $self members.

+ Handle hard errors better.
  Use an internal function that can be replaced using a method.
  Maybe use exception processing (this would help Mbox->sync).

+ Modularize the prep code in the test modules.  In it's current form,
  things are getting (very)ugly(er).

+ Modularize and consolidate the regression tests.
###############################################################################
+ Issues with MailTools:
	It currently folds header lines - this will cause changes to a
		message being written out where it is otherwise
		unchanged.
	The get method returns the string with the newline at the end.
		This isn't a problem, but it can be cumbersome for
		coders.

+ Would be nice to have something to manage sets of folders.
  Maybe a function that is passed a directory and returns a list of
  valid folders (recursive directory scan).

+ Folder type autodetection maybe.

+ Various folder interfaces:
	+ maildir (qmail)
	+ nntp
	+ imap

+ Start work on the mua that started this thing... :-)
