+ Methods not implemented yet:
	threaded sort
	message status (unread, replied, forwarded, resent, message size)
	message_summary
  Actually, maybe some of the message-handling methods should be part
  of a message class that abstracts messages a little more than what
  is currently available with Mail::Internet.  Since the interface to
  message classes isn't solidified yet, I hesitate to subclass
  Mail::Internet.  Geez, mail is such a pain... :-)

+ Do some kind of option processing.

+ mbox interface
	+ add ability to specify locking strategy.
	+ it's technically possible to do mbox without copying the
	  entire folder to a working file.  there are situations where
	  this would a good thing.

+ emaul interface
	+ have update, refile, and pack(?) queue operations for later syncing
	+ add folder locking
	+ option for whether it makes backup copies of modified messages

+ Implement named message sequences (ala mh).
  For folder types that don't have persistance storage of sequences,
  they will only be in affect while the folder is open.

+ Hook into MIME::Entity.
  The fact that Mail::Internet and MIME::Entity have different
  interfaces still needs to be dealt with. (also see note under
  'Methods not implemented yet')

+ Handle hard errors better.
  Use an internal function that can be replaced using a method.
  Maybe use exception processing (this would help Mbox::sync).

+ Provide methods for accessing $self->{Messages}.
  The goal is to insulate the folder handlers from the internal data
  structures in Mail::Folder.

+ Modularize the prep code in the test modules.  In it's current form,
  things are getting ugly(er) as more folder interfaces are added.
###############################################################################
+ Issues with MailTools:
	It currently folds header lines - this will cause changes to a
		message being written out where it is otherwise
		unchanged.
	The get method returns the string with the newline at the end.
		This isn't a problem, but it can be cumbersome for
		coders.

+ Maybe add an option to do an implicit sync on any operation that
  alters the folder.  This would hurt pretty bad on monolithic folder
  types like mbox.  This is a feature request that I haven't made up
  my mind about.

+ Tim Pierce suggested providing a slightly general engine that
  understands a common set of methods with config parameters that
  would help create new folder interfaces with less code.

+ Would be nice to have something to manage sets of folders.

+ Modularize the regression tests more.

+ An imap folder interface would rock.
